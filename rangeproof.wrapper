#ifndef SECP256K1_CONTEXT_ALL
#define SECP256K1_CONTEXT_ALL SECP256K1_CONTEXT_NONE | SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY
#endif

int pedersen_commitment_parse(unsigned char *commit_data, const unsigned char *input) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_pedersen_commitment_parse(ctx, &commit, input);
  memcpy(commit_data, &(commit.data), 64);
  secp256k1_context_destroy(ctx);
  return ret;
}

int pedersen_commitment_serialize(unsigned char *output, unsigned char *commit_data) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_pedersen_commitment_serialize(ctx, output, &commit);
  secp256k1_context_destroy(ctx);
  return ret;
}

int pedersen_commit(unsigned char *commit_data, const unsigned char *blind, uint64_t value) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_pedersen_commit(ctx, &commit, blind, value, secp256k1_generator_h);
  memcpy(commit_data, &(commit.data), 64);
  secp256k1_context_destroy(ctx);
  return ret;
}

int pedersen_blind_sum(unsigned char *sum, const unsigned char * const *blinds, size_t n, size_t npos) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  int ret = secp256k1_pedersen_blind_sum(ctx, sum, blinds, n, npos);
  secp256k1_context_destroy(ctx);
  return ret;
}

int pedersen_verify_tally(const unsigned char * const *commits_data, size_t n_commits, const unsigned char * const *negcommits_data, size_t n_negcommits) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commits[n_commits];
  secp256k1_pedersen_commitment negcommits[n_negcommits];
  secp256k1_pedersen_commitment *p_commits[n_commits];
  secp256k1_pedersen_commitment *p_negcommits[n_negcommits];
  for (int i = 0; i < (int)n_commits; ++i) {
    memcpy(commits[i].data, commits_data[i], 64);
    p_commits[i] = &commits[i];
  }
  for (i = 0; i < (int)n_negcommits; ++i) {
    memcpy(negcommits[i].data, negcommits_data[i], 64);
    p_negcommits[i] = &negcommits[i];
  }
  int ret = secp256k1_pedersen_verify_tally(ctx, p_commits, n_commits, p_negcommits, n_negcommits);
  secp256k1_context_destroy(ctx);
  return ret;
}

int rangeproof_sign(unsigned char *proof, size_t *plen, uint64_t min_value, const unsigned char *commit_data, const unsigned char *blind, const unsigned char *nonce, int exp, int min_bits, uint64_t value, const unsigned char *message, size_t msg_len, const unsigned char *extra_commit, size_t extra_commit_len) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_rangeproof_sign(ctx, proof, plen, min_value, &commit, blind, nonce, exp, min_bits, value, message, msg_len, extra_commit, extra_commit_len, secp256k1_generator_h);
  secp256k1_context_destroy(ctx);
  return ret;
}

int rangeproof_info(int *exp, int *mantissa, uint64_t *min_value, uint64_t *max_value, const unsigned char *proof, size_t plen) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  int ret = secp256k1_rangeproof_info(ctx, exp, mantissa, min_value, max_value, proof, plen);
  secp256k1_context_destroy(ctx);
  return ret;
}

int rangeproof_verify(uint64_t *min_value, uint64_t *max_value, const unsigned char *commit_data, const unsigned char *proof, size_t plen, const unsigned char *extra_commit, size_t extra_commit_len) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_rangeproof_verify(ctx, min_value, max_value, &commit, proof, plen, extra_commit, extra_commit_len, secp256k1_generator_h);
  secp256k1_context_destroy(ctx);
  return ret;
}

int rangeproof_rewind(unsigned char *blind_out, uint64_t *value_out, unsigned char *message_out, size_t *outlen, const unsigned char *nonce, uint64_t *min_value, uint64_t *max_value, const unsigned char *commit_data, const unsigned char *proof, size_t plen, const unsigned char *extra_commit, size_t extra_commit_len) {
  secp256k1_context *ctx = secp256k1_context_create(SECP256K1_CONTEXT_ALL);
  secp256k1_pedersen_commitment commit;
  memcpy(commit.data, commit_data, 64);
  int ret = secp256k1_rangeproof_rewind(ctx, blind_out, value_out, message_out, outlen, nonce, min_value, max_value, &commit, proof, plen, extra_commit, extra_commit_len, secp256k1_generator_h);
  secp256k1_context_destroy(ctx);
  return ret;
}